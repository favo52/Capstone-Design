<?xml version="1.0" encoding="iso-8859-1"?>
<programList xmlns="ProgramNameSpace">
  <program name="move" public="false">
    <description />
    <paramSection />
    <localSection />
    <source>
      <code>begin
  //The move function runs when Chesster decides to move a piece but not promote it.
  //It decodes ASCII values from the socket to assign them to initial and final spaces
  //for a piece to move from/to in that turn.
  //
  //If a piece requires to be captured during the turn, the piece is discarded first before
  //Chesster's piece makes its actual move.
  //
  //Likewise, special movements like Castling and En Passant are also programmed here.
  //These special movements like discarding a pawn or moving the rook are done before the
  //the movements of the primary piece for this turn. 
  
  
  //Move arm to the middle of the board, above it.
  movej(jMiddlePos,tGripper,mMoveSpeed)
  waitEndMove()
  
  //First, the function verifies if there's a special movement being done this turn.
  if nSpecial != 0
    //Runs a loop to obtain the special movement piece to be acquired that turn on its current position.
    for nIndex = 1 to 8
      //Decodes the ASCII code for row number first, then decodes the ASCII code for column letter.
      //Once the loop finds the correct row and column, the pPick is assigned to the correct position to grab.
      if nSpecialRow == nIndex + 48
        switch nSpecialCol
          case 97
            pPick = compose(pOrigin,fBoard,trA[nIndex])
          break
      
          case 98
            pPick = compose(pOrigin,fBoard,trB[nIndex])
          break

          case 99
            pPick = compose(pOrigin,fBoard,trC[nIndex])
          break
      
          case 100
            pPick = compose(pOrigin,fBoard,trD[nIndex])
          break
            
          case 101
            pPick = compose(pOrigin,fBoard,trE[nIndex])
          break

          case 102
            pPick = compose(pOrigin,fBoard,trF[nIndex])
          break
            
          case 103
            pPick = compose(pOrigin,fBoard,trG[nIndex])
          break
            
          case 104
            pPick = compose(pOrigin,fBoard,trH[nIndex])
          break
        endSwitch
        //Once position of piece is found, loop is ended.
        nIndex = nIndex + 8
      
      endIf
    endFor
    //First checks if the special movement is En Passant.
    if nSpecial == 1
      //Takes the position of the Pawn to be captured due to En Passant and discards it in the box.
      
      //Move arm so it's above the selected piece to grab.
      movej(appro(pPick,trApproach), tGripper, mMoveSpeed)
      waitEndMove()
        
      //Approaches the piece from above, then grabs it with the gripper.
      movej(pPick, tGripper, mGrabSpeed)
      close(tGripper)
      waitEndMove()
      bGripperIsOpen = false
    
      //Once the piece is grabbed, the arm moves back up.  
      movej(appro(pPick,trApproach), tGripper, mGrabSpeed)
      waitEndMove()
    
      //Move the grabbed piece so it's located above the discard box.
      //The gripper then opens and the piece naturally falls into the box.
      movej(jBoxPos,tGripper,mMoveSpeed)
      waitEndMove()  
      open(tGripper)
      waitEndMove()
      bGripperIsOpen = true
    else
      //Condition only active when special movement is castling.
      //Compares rook and king positions to determine whether
      //the castling is done to the left or right.
      if nSpecialCol - nInitCol &lt; 0
        pPlace = compose(pOrigin,fBoard,trD[8])
      else
        if nSpecialCol - nInitCol &gt; 0
          pPlace = compose(pOrigin,fBoard,trF[8]) 
        endIf
      endIf
      //Moves the rook first, then finishes castling the king during
      //the regular move phase.
      

      
      //Move arm so it's above the selected piece to grab.  
      movej(appro(pPick,trApproach), tGripper, mMoveSpeed)
      waitEndMove()
      
      //Approaches the piece from above, then grabs it with the gripper.      
      movej(pPick, tGripper, mGrabSpeed)
      close(tGripper)
      waitEndMove()
      bGripperIsOpen = false
      
      //Once the piece is grabbed, the arm moves back up. 
      movej(appro(pPick,trApproach), tGripper, mGrabSpeed)
      waitEndMove()
      
      //The arm then move to stop above where the piece will be placed.
      movej(appro(pPlace,trApproach), tGripper, mMoveSpeed)
      waitEndMove()
      
      //Approaches the space from above, then releases the gripper.
      //trRelease is order to release the piece slightly above where it was grabbed.
      //This is done to prevent the robot arm from running into unnecessary friction.
      movej(appro(pPlace,trRelease), tGripper, mGrabSpeed)
      open(tGripper)
      waitEndMove()
      bGripperIsOpen = true
    
      //Moves arm to far above the space the piece was set, and awaits for next set of commands.
      movej(appro(pPlace,trApproach), tGripper, mGrabSpeed)
      waitEndMove()
    endIf
  endIf

  //Runs a loop to obtain the piece to be moved that turn based on its current position.
  for nIndex = 1 to 8
    //Decodes the ASCII code for row number first, then decodes the ASCII code for column letter.
    //Once the loop finds the correct row and column, the pPick is assigned to the correct position to grab.
    if nInitRow == nIndex + 48
      switch nInitCol
        case 97
          pPick = compose(pOrigin,fBoard,trA[nIndex])
        break
      
        case 98
          pPick = compose(pOrigin,fBoard,trB[nIndex])
        break

        case 99
          pPick = compose(pOrigin,fBoard,trC[nIndex])
        break
      
        case 100
          pPick = compose(pOrigin,fBoard,trD[nIndex])
        break
            
        case 101
          pPick = compose(pOrigin,fBoard,trE[nIndex])
        break

        case 102
          pPick = compose(pOrigin,fBoard,trF[nIndex])
        break
            
        case 103
          pPick = compose(pOrigin,fBoard,trG[nIndex])
        break
            
        case 104
          pPick = compose(pOrigin,fBoard,trH[nIndex])
        break
      endSwitch
      //Once position of piece is found, loop is ended.
      nIndex = nIndex + 8
      
    endIf
  endFor
  
  //Runs a loop to move the piece grabbed that turn and decode where to place it.
  //This information is also necessary in case the current movement this turn requires
  //discarding an opposing piece.
  for nIndex = 1 to 8
    if nEndRow == nIndex + 48
      switch nEndCol
        case 97
          pPlace = compose(pOrigin,fBoard,trA[nIndex])
        break
      
        case 98
          pPlace = compose(pOrigin,fBoard,trB[nIndex])
        break

        case 99
          pPlace = compose(pOrigin,fBoard,trC[nIndex])
        break
      
        case 100
          pPlace = compose(pOrigin,fBoard,trD[nIndex])
        break
            
        case 101
          pPlace = compose(pOrigin,fBoard,trE[nIndex])
        break

        case 102
          pPlace = compose(pOrigin,fBoard,trF[nIndex])
        break
            
        case 103
          pPlace = compose(pOrigin,fBoard,trG[nIndex])
        break
            
        case 104
          pPlace = compose(pOrigin,fBoard,trH[nIndex])
        break
      endSwitch
      
      nIndex = nIndex + 8
    
    endIf
  endFor
  
  //Captures a piece and discards it first before moving the piece for the turn.
  //This section is only valid if no special movement was done this turn via
  //Castling or En Passant.
  if bCapture == true and nSpecial == 0
  
    //Takes the position of the piece to be captured and discards it in the box.
      
    //Move arm so it's above the selected piece to grab.
    movej(appro(pPlace,trApproach), tGripper, mMoveSpeed)
    waitEndMove()
        
    //Approaches the piece from above, then grabs it with the gripper.
    movej(pPlace, tGripper, mGrabSpeed)
    close(tGripper)
    waitEndMove()
    bGripperIsOpen = false
    
    //Once the piece is grabbed, the arm moves back up.  
    movej(appro(pPlace,trApproach), tGripper, mGrabSpeed)
    waitEndMove()
    
    //Move the grabbed piece so it's located above the discard box.
    //The gripper then opens and the piece naturally falls into the box.
    movej(jBoxPos,tGripper,mMoveSpeed)
    waitEndMove()  
    open(tGripper)
    waitEndMove()
    bGripperIsOpen = true
    
  endIf
  
  //Move arm so it's above the selected piece to grab.
  movej(appro(pPick,trApproach), tGripper, mMoveSpeed)
  waitEndMove()      
  
  //Approaches the piece from above, then grabs it with the gripper.
  movej(pPick, tGripper, mGrabSpeed)
  close(tGripper)
  waitEndMove()
  bGripperIsOpen = false  
  
  //Once the piece is grabbed, the arm moves back up. 
  movej(appro(pPick,trApproach), tGripper, mGrabSpeed)
  waitEndMove()
  
  //Move arm so it's above the selected space to place piece in.
  movej(appro(pPlace,trApproach), tGripper, mMoveSpeed)
  waitEndMove()      
  
  //Approaches the space from above, then releases the gripper.
  //trRelease is order to release the piece slightly above where it was grabbed.
  //This is done to prevent the robot arm from running into unnecessary friction.
  movej(appro(pPlace,trRelease), tGripper, mGrabSpeed)
  open(tGripper)
  waitEndMove()
  bGripperIsOpen = true
  
  //Once the piece is released, the arm moves back up. 
  movej(appro(pPlace,trApproach), tGripper, mGrabSpeed)
  waitEndMove()

  //Move arm to its resting position.
  movej(jStartPos,tGripper,mMoveSpeed)
  waitEndMove()
  
end</code>
    </source>
  </program>
</programList>