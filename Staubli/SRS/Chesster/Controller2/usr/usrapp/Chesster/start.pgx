<?xml version="1.0" encoding="iso-8859-1"?>
<programList xmlns="ProgramNameSpace">
  <program name="start" public="false">
    <description />
    <paramSection />
    <localSection />
    <source>
      <code>begin
  //Chesster is a VAL 3 application designed to run in conjunction with
  //Chesster's PC program, as well as the Cognex8405 camera program.
  //Chesster starts up a chess game with varying difficulties in order
  //to train/play with human opponents. The program is designed to move
  //black by itself, all the player needs to do is follow start up 
  //instructions and play to the best of their ability.
  
  
  //Failsafe so robot doesn't try to grab a piece or move with a closed gripper.
  resetMotion()
  
  //Initial state, opens the gripper and goes to starting position
  //if it isn't already there.
  open(tGripper)
  bGripperIsOpen = true
  movej(jStartPos, tGripper, mMoveSpeed)
  waitEndMove()
  
  //Sets the board frame using A1 as its origin point,
  //H1 as its X axis, and A8 as its Y axis.
  nFrameError = setFrame(pOrigin,pX,pY,fBoard)
  
  //If the frame can't be set, exits VAL 3 program
  if(nFrameError != 0)
    putln("Error creating initial frame. Please check settings and try again.")
    putln("Chesster will now shut down.")
    delay(5)
    return
  endIf
  
  //Gives a welcome screen and instructions to set up game on the arm's teach pendant.
  cls()
  userPage()
  title("CHESSTER")
  putln(" Polytechnic University of Puerto Rico")
  putln("")
  putln("Electrical and Computer Engineering and ")
  putln("      Computer Science Department")
  putln("")
  putln("              CHESSTER")
  putln("")
  putln("            Instructions")
  putln("1. Connect PC to network.")
  putln("2. Run Chesster and connect arm/camera.")
  putln("3. Place pieces in starting position.")
  putln("4. Press New Game button.")
  putln("5. Wait for PC confirmation.")
  
  //Sets aliases to New Game and End Turn push buttons,
  //as well as communication socket for Chesster.
  //Chesster communication socket was defined in the CS8 beforehand
  //using IP address 192.168.7.10 and port 150000 
  dioLink(dNewGame,io:usrIn0)
  dioLink(dEndTurn,io:usrIn1)
  sioLink(sChesster,io:Chesster)
  
  //Starts the main loop. Loop is endless until the program is manually closed.
  while true
    //default string for game state
    sSendString = "000"
    //Core of the main program. Stays waiting until 2 conditions are met simultaneously.
    //First, a button must be pressed, either New Game or End Turn.
    //The robot arm also MUST be stationary to exit the wait command. Otherwise, the button press is ignored.
    wait((dNewGame == true or dEndTurn == true) and isSettled() == true)
    
    //If the above conditions are met, ensures that only ONE button was pressed at the same time.
    //Otherwise, ignore the button press and goes back to the wait command.
    //New Game button takes precedence over End Turn button. Asks the camera to take a picture.
    //If everything is placed in the correct starting positions, Chesster activates the new game.
    if dNewGame == true and dEndTurn == false
      //Send function is called using the string pattern that asks Chesster for a new game.
      //A 1 on the first index of the string confirms a New Game is being requested.
      sSendString = "100"
      //Begins send function to send the string.
      call send()
    else
      //End Turn button is only valid when it was the only button pressed and Chesster already
      //has a game active, otherwise this is ignored and Chesster goes back to the wait line.
      if dEndTurn == true and dNewGame == false and nGameActive == 1
        //Send function is called using the index that asks Chesster to confirm the player's move was valid.
        //If valid, Chesster decides how to move and send the data back to the VAL3 program.
        //A 1 on the second index of the string confirms that the player has ended their turn and boots up
        //camera to confirm the player's move was legal.
        sSendString = "010"
        //Begins send function to send the string.
        call send()
      endIf
    endIf
    //This section only activates if there was actual communication between arm and Chesster, and forces
    //arm to do a confirmation move:
    //0 = Initial board state is invalid.
    //1 = Arm move was done, finished, and arm is settled, does up and down motion to confirm player turn now.
    //2 = Illegal move was done by player or new game was accidentally started in the middle of a game. Arm shakes in a no motion.
    //3 = Player wins, does a sulking motion.
    //4 = Chesster wins, does a boasting motion.
    //5 = Stalemate. Nobody wins. 
    if sSendString != "000"
      switch nGameActive
        case 0
          //Case for initial board state invalid. Applies to both new and ongoing games.
          //Arm does a shake saying no.
          movej(jNoPos, tGripper, mMoveSpeed)
          movej(jStartPos, tGripper, mMoveSpeed)
        break
        case 1
          movej(jConfirmPos, tGripper, mMoveSpeed)
          movej(jStartPos, tGripper, mMoveSpeed)
        break
        case 2
          //Case for illegal turn or illegal initial board state 
          //AFTER game has been started, goes back to 1 after
          movej(jNoPos, tGripper, mMoveSpeed)
          movej(jStartPos, tGripper, mMoveSpeed)
          nGameActive = 1
        break
        case 3
          //Case for Chesster losing a game, goes to a corner
          //and sulks.
          movej(jSulkPos, tGripper, mMoveSpeed)
          waitEndMove()
          delay(1)
          movej(jSulk2Pos,tGripper,mSulkSpeed)
          waitEndMove()
          delay(3)
          movej(jSulkPos,tGripper,mSulkSpeed)
          waitEndMove()
          delay(1)
          movej(jStartPos,tGripper,mMoveSpeed)
          nGameActive = 0
        break
        case 4
          //Case for Chesster winning a game.
          //Taunts the player by "laughing" and clicking the gripper.
          movej(jWinPos, tGripper,mMoveSpeed)
          waitEndMove()
          delay(1)
          for nIndex = 0 to 3
            movej(jWin2Pos, tGripper, mMoveSpeed)
            movej(jWinPos, tGripper, mMoveSpeed)
          endFor
          waitEndMove()
          close(tGripper)
          open(tGripper)
          close(tGripper)
          open(tGripper)
          delay(1)
          movej(jStartPos,tGripper,mMoveSpeed)
          waitEndMove()
          nGameActive = 0
        break
        case 5
          //case for stalemate, goes back to 0 after
          nGameActive = 0
        break
      endSwitch
    endIf
  endWhile
end</code>
    </source>
  </program>
</programList>